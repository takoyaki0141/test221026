/quiz-backend
│── /config
│    ├── db.js       # MySQL接続設定
│── /routes
│    ├── questions.js # APIルート
│── /controllers
│    ├── questionsController.js # ロジック処理
│── /models
│    ├── questionModel.js # DBモデル
│── server.js          # メインサーバー
│── package.json



mkdir quiz-backend
cd quiz-backend
npm init -y
npm install express mysql2 dotenv cors body-parser



CREATE DATABASE quiz_db;

USE quiz_db;

CREATE TABLE questions (
    id INT AUTO_INCREMENT PRIMARY KEY,
    question TEXT NOT NULL,
    answer VARCHAR(255) NOT NULL,
    category VARCHAR(100) NOT NULL
);




const mysql = require('mysql2');
const dotenv = require('dotenv');

dotenv.config();

const pool = mysql.createPool({
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_NAME,
  waitForConnections: true,
  connectionLimit: 10,
  queueLimit: 0
});

module.exports = pool.promise();




DB_HOST=localhost
DB_USER=root
DB_PASSWORD=password
DB_NAME=quiz_db



⭕️/models/questionModel.js

const db = require('../config/db');

class Question {
  static async getAll() {
    const [rows] = await db.query('SELECT * FROM questions');
    return rows;
  }

  static async getById(id) {
    const [rows] = await db.query('SELECT * FROM questions WHERE id = ?', [id]);
    return rows[0];
  }

  static async create(question, answer, category) {
    const [result] = await db.query(
      'INSERT INTO questions (question, answer, category) VALUES (?, ?, ?)',
      [question, answer, category]
    );
    return result.insertId;
  }

  static async delete(id) {
    const [result] = await db.query('DELETE FROM questions WHERE id = ?', [id]);
    return result.affectedRows;
  }
}

module.exports = Question;


⭕️ /controllers/questionsController.js

const Question = require('../models/questionModel');

exports.getAllQuestions = async (req, res) => {
  try {
    const questions = await Question.getAll();
    res.json(questions);
  } catch (error) {
    res.status(500).json({ error: 'データ取得エラー' });
  }
};

exports.getQuestionById = async (req, res) => {
  try {
    const question = await Question.getById(req.params.id);
    if (!question) {
      return res.status(404).json({ error: '問題が見つかりません' });
    }
    res.json(question);
  } catch (error) {
    res.status(500).json({ error: 'データ取得エラー' });
  }
};

exports.createQuestion = async (req, res) => {
  try {
    const { question, answer, category } = req.body;
    if (!question || !answer || !category) {
      return res.status(400).json({ error: '全ての項目を入力してください' });
    }

    const id = await Question.create(question, answer, category);
    res.status(201).json({ message: '問題を追加しました', id });
  } catch (error) {
    res.status(500).json({ error: 'データ追加エラー' });
  }
};

exports.deleteQuestion = async (req, res) => {
  try {
    const deleted = await Question.delete(req.params.id);
    if (!deleted) {
      return res.status(404).json({ error: '問題が見つかりません' });
    }
    res.json({ message: '問題を削除しました' });
  } catch (error) {
    res.status(500).json({ error: 'データ削除エラー' });
  }
};



⭕️ /routes/questions.js

const express = require('express');
const router = express.Router();
const questionsController = require('../controllers/questionsController');

router.get('/', questionsController.getAllQuestions);
router.get('/:id', questionsController.getQuestionById);
router.post('/', questionsController.createQuestion);
router.delete('/:id', questionsController.deleteQuestion);

module.exports = router;



⭕️server.js

const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const dotenv = require('dotenv');

dotenv.config();

const app = express();
const PORT = process.env.PORT || 5000;

app.use(cors());
app.use(bodyParser.json());

const questionRoutes = require('./routes/questions');
app.use('/api/questions', questionRoutes);

app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
});



