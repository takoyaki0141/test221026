const authClientId = process.env.LOGIN_AUTH_CLIENT_ID;
const secretKey = process.env.LOGIN_SECRET_KEY;
const LOGIN_URL = `https://dauthenticator.discojpn.com/api/user/authcheck?clientId=${authClientId}`;
const userInfoUrl = "https://dauthenticator.discojpn.com/api/user/userInfo";

if (!authClientId) {
    console.error("LOGIN_AUTH_CLIENT_ID is not set.");
    process.exit(1);
}
if (!secretKey) {
    console.error("LOGIN_SECRET_KEY is not set.");
    process.exit(1);
}

// セッションにユーザー情報が存在するかチェック
const sessionCheck = (req) => {
    return req.session.u_name !== undefined && req.session.u_name !== "";
};

// ログインチェック、リダイレクト処理
const loginCheck = async (req, res, next) => {
    console.log("loginCheck実行:", req.session);

    if (sessionCheck(req)) {
        console.log("ログイン済み");
        req.session.url = ""; // 念のためクリア
        return res.json({ loggedIn: true, userId: req.session.u_id, userName: req.session.u_name });
    } else {
        console.log("未ログイン、認証ページへリダイレクト");
        req.session.url = req.originalUrl; // アクセスしたURLをセッションに保存
        return res.json({ loggedIn: false, redirectUrl: LOGIN_URL });
    }
};

// アクセストークンを用いてログイン処理を行う
const handleLoginCheck = async (req, res) => {
    const accessToken = req.query.accessToken;
    if (!accessToken) return res.status(400).json({ error: "No accessToken provided" });

    const userInfo = await getAccount(accessToken);
    if (!userInfo) return res.status(401).json({ error: "Failed to get user information" });

    req.session.u_id = userInfo.userId;
    req.session.u_name = userInfo.user.name;
    console.log("ログイン成功:", req.session.u_id, req.session.u_name);

    // ログイン前のアクセスURLを取得し、なければデフォルトURLを指定
    const redirectUrl = req.session.url || "http://localhost:5173";

    // 一度使用したセッションURLをクリア（念のため）
    req.session.url = "";

    // JSONでリダイレクト先をフロントエンドに渡す
    res.json({ loggedIn: true, redirectUrl });
};

// アクセストークンを用いてユーザー情報を取得
const getAccount = async (accessToken) => {
    const postContent = {
        clientId: authClientId,
        secret: secretKey,
        accessToken
    };

    try {
        const response = await fetch(userInfoUrl, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(postContent)
        });

        if (!response.ok) {
            console.log("アクセストークンPOSTエラー", response.statusText);
            return null;
        }
        return await response.json();
    } catch (err) {
        console.error("APIエラー", err);
        return null;
    }
};

module.exports = { loginCheck, handleLoginCheck };




const express = require('express');
const router = express.Router();

// ルート読み込み
const projectRoutes = require('./routes/projectRoutes');
const taskRoutes = require('./routes/taskRoutes');

// ログインチェック関数とログイン処理関数読み込み
const { loginCheck, handleLoginCheck } = require('./loginCheck');

// メインページ（ログイン済みの場合のみ表示）
router.get('/mainTest', loginCheck, (req, res) => {
    res.render('mainTest', { u_id: req.session.u_id, u_name: req.session.u_name });
});

// ログイン確認
router.get('/logincheck', loginCheck);

// ログイン処理用のエンドポイント
router.get('/login', async (req, res) => {
    await handleLoginCheck(req, res);
});

// APIルート
router.use('/api/project', projectRoutes);
router.use('/api/task', taskRoutes);

module.exports = router;

import { useEffect } from "react";

function NodeMain() {
  useEffect(() => {
    loginCheck();
    getData();
  }, []);

  async function getData() {
    const url = "http://localhost:5000/api/project/allProjects";
    try {
      const response = await fetch(url, {
        method: "GET",
      });
      const json = await response.json();
      console.log(json);
    } catch (error) {
      console.log(error);
    }
  }

  async function loginCheck() {
    const url = "http://localhost:5000/logincheck";
    try {
      const response = await fetch(url, {
        method: "GET",
        mode: "cors",
        credentials: "include",
      });

      const json = await response.json();
      console.log(json);

      if (!json.loggedIn) {
        // 未ログインなら認証ページへリダイレクト
        window.location.href = json.redirectUrl;
      } else if (json.redirectUrl) {
        // ログイン成功後に適切なページへリダイレクト
        window.location.href = json.redirectUrl;
      }
    } catch (error) {
      console.log(error);
    }
  }

  return (
    <>
      <div className="text-3xl">node page</div>
    </>
  );
}

export default NodeMain;

